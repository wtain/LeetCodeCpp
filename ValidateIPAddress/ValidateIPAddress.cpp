
#include <iostream>
#include <iomanip>
#include <vector>
#include <string>
#include <cctype>

using namespace std;

/*
https://leetcode.com/explore/challenge/card/june-leetcoding-challenge/541/week-3-june-15th-june-21st/3362/
https://leetcode.com/problems/validate-ip-address/

Write a function to check whether an input string is a valid IPv4 address or IPv6 address or neither.

IPv4 addresses are canonically represented in dot-decimal notation, which consists of four decimal numbers, each ranging from 0 to 255, separated by dots ("."), e.g.,172.16.254.1;

Besides, leading zeros in the IPv4 is invalid. For example, the address 172.16.254.01 is invalid.

IPv6 addresses are represented as eight groups of four hexadecimal digits, each group representing 16 bits. The groups are separated by colons (":"). For example, the address 2001:0db8:85a3:0000:0000:8a2e:0370:7334 is a valid one. Also, we could omit some leading zeros among four hexadecimal digits and some low-case characters in the address to upper-case ones, so 2001:db8:85a3:0:0:8A2E:0370:7334 is also a valid IPv6 address(Omit leading zeros and using upper cases).

However, we don't replace a consecutive group of zero value with a single empty group using two consecutive colons (::) to pursue simplicity. For example, 2001:0db8:85a3::8A2E:0370:7334 is an invalid IPv6 address.

Besides, extra leading zeros in the IPv6 is also invalid. For example, the address 02001:0db8:85a3:0000:0000:8a2e:0370:7334 is invalid.

Note: You may assume there is no extra space or special characters in the input string.

Example 1:
Input: "172.16.254.1"

Output: "IPv4"

Explanation: This is a valid IPv4 address, return "IPv4".
Example 2:
Input: "2001:0db8:85a3:0:0:8A2E:0370:7334"

Output: "IPv6"

Explanation: This is a valid IPv6 address, return "IPv6".
Example 3:
Input: "256.256.256.256"

Output: "Neither"

Explanation: This is neither a IPv4 address nor a IPv6 address.
*/

//Runtime: 4 ms, faster than 37.03% of C++ online submissions for Validate IP Address.
//Memory Usage : 6.4 MB, less than 65.28% of C++ online submissions for Validate IP Address.
//Runtime: 4 ms, faster than 37.03% of C++ online submissions for Validate IP Address.
//Memory Usage : 6.6 MB, less than 25.36% of C++ online submissions for Validate IP Address.
class Solution {
public:

	static const string& IPV4() {
		static string sIPV4 = "IPv4";
		return sIPV4;
	}

	static const string& IPV6() {
		static string sIPV6 = "IPv6";
		return sIPV6;
	}

	static const string& Neither() {
		static string sNeither = "Neither";
		return sNeither;
	}

	static bool ishexdigit(char c) {
		c = tolower(c);
		return isdigit(c) || (c >= 'a' && c <= 'f');
	}

	static vector<string> split(const string& str, const char c) {
		vector<string> result;
		if (str.empty())
			return{};
		const size_t n = str.length();
		result.emplace_back();
		for (size_t i = 0; i < n; ++i) {
			if (str[i] == c)
				result.emplace_back();
			else
				result.back() += str[i];
		}
		return result;
	}

	bool isValid4(const string& IP) {
		const auto parts = split(IP, '.');
		if (parts.size() != 4)
			return false;
		for (const auto& part : parts) {
			if (part.empty() || part.length() > 3)
				return false;
			for (size_t i = 0; i < part.length(); ++i)
				if (!isdigit(part[i]))
					return false;
			const int v = stoi(part);
			if (part[0] == '0' && part != "0")
				return false;
			if (v > 255 || v < 0)
				return false;
		}
		return true;
	}

	bool isValid6(const string& IP) {
		const auto parts = split(IP, ':');
		if (parts.size() != 8)
			return false;
		for (const auto& part : parts) {
			if (part.empty() || part.length() > 4)
				return false;
			for (size_t i = 0; i < part.length(); ++i)
				if (!ishexdigit(part[i]))
					return false;
			const int v = stoi(part, nullptr, 16);
			if (v > 65535 || v < 0)
				return false;
		}
		return true;
	}

	string validIPAddress(string IP) {
		if (isValid4(IP))
			return IPV4();
		if (isValid6(IP))
			return IPV6();
		return Neither();
	}
};

void test(const string& IP, const string& expectedResult) {
	const string result = Solution().validIPAddress(IP);
	bool testresult = result == expectedResult;
	cout << boolalpha << testresult << " - " << IP << " - " << expectedResult << " - " << result << endl;
}

int main()
{
	vector<pair<string, string>> tests = {
		{ "172.16.254.1" , Solution::IPV4() },
		{ "2001:0db8:85a3:0:0:8A2E:0370:7334" , Solution::IPV6() },
		{ "256.256.256.256" , Solution::Neither() },
		{ "2001:db8:85a3:0:0:8A2E:0370:7334" , Solution::IPV6() },
		{ "172.16.254.01" , Solution::Neither() },
		{ "2001:0db8:85a3::8A2E:0370:7334" , Solution::Neither() },

		{ "172..254.1" , Solution::Neither() },
		{ "00.0.0.0" , Solution::Neither() },
		{ "2001:0db8:85a3:0:0:08A2E:0370:7334" , Solution::Neither() },

		{olution::Neither() }
	};

	for (const auto& t : tests)
		test(t.first, t.second);

    return 0;
}

